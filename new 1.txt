Django Commands:
******django-admin startproject project_name***** 
                (or)
python -m django startproject project_name              -- in cmd this command helps us to create files related to project and change directory where we need to create
python manage.py runserver XXXX(\\This is port name))   -- change dir to manage.py and run hence server gets started
python manage.py startapp app_name                      -- to start app
from django.http.response import HttpResponse           -- to import response in views
from django.urls import path                            --to import path in urls
from . import views                                     -- to import view in url
urlpatterns=[
    path("",views.simple_view)                          -- to import function into url
]
To add name to urls:
     first thing while adding a name to urls we simply keep name=XXXX
     but before that in urls we have to write "app_name='write app name'"
    adding in html with using link names:
        {% url 'web_app:example' %}     --url




for templates:
    import os
    then : os.path.join(BASE_DIR,'templates/')

TO RUN WITH TEMPLATES IN APP

1-python manage.py migrate                                -- to check migration

2-in settings we modify:
    add a string 'app_name.apps.function_in_apps'

3-python manage.py makemigrations app_name

4-python manage.py migrate

5-Now create html folder named templates and html files


jinga:
{% for x in like %}             --for loop
{% if x == 1 %}                 --if condition
{% url 'web_app:example' %}     --url
{% block block_name %}{% endblock  %}     -- block for inheritance
{% extends '' %}                -- for inheritance
{% comment "" %}{% endcomment %}--comment
{%load static%}               --for static
{%static "app_name/fle_name"%}  -- creation of static


Loading static files:
    First create a folder named static in app similar to templates
    Now move static file such as img to the loc
    Check settings file that "static/" is present
    Now in html file use below code:
    {%load static%}
    <img src="{%static "app_name/fle_name"%}"


Creating models:
    create model in models.py
    in models.py we write as "first=models.Charfield(max_length=30)"
    create an app
    add app to the settings
    First run the given program:
    python manage.py makemigrations app_name
    python manage.py migrate

Manuplating data in database:
first start shell with "python manage.py shell"
In shell we can create objects using various types:

    a-first object creation then adding
    b-using bulk command
    c-direct creation
@@@@@@@************class_name=model_name************@@@@@@@@@@@

Shell commands:
first import "from app-name.models import class_name"
Object creation using 'a':
    obj_name = class_name(arguments)
    Ex:
    obj_1=patient(first_name='Anvesh',last_name='Nagothu',age=19)
    obj_name.save()
Object creation using 'b':
    first create list then use the list for making objects bulk
    creation of list using python
    class_name.objects.bulk_create(list_name)
    eg:
        my_list=[patient(first_name='Anvesh',last_name='Nagothu',age=19),patient(first_name='Raju',last_name='jango',age=22)] 
        patient.objects.bulk_create(my_list)   
Object creation using 'c':
    class_name.objects.create(arguments)
    eg:patient.objects.create(first_name='Raju',last_name='jango',age=22)


Shell commands:

for viewing of objects and data:
    now use "model_name.objects.all()"
     to view as string in modal.py add below fn:
        def __str__(self):
        return (f"{}is the name ")

To get using id:pk is similar as id
    as same as array we can access using id but it starts from 1
    code is -"model_name.ojects.get(pk=id_no)"
    and also we get only one value using get() fn so use filters
Using filters:
    model_name.objects.filter(condition).all()- its is code for filters
    we can use multiple filters-- model_name.objects.filter(condition).filter(condition_2).all()
Hence we use 'Q' fn for & and Or-|:
    from django.db.models import Q
    model_name.objects.filter.(Q(condition) & Q(condition_2)).all()
    similarly or operator
Field lookup:
    model_name.objects.filter(arguments__type='').all()
    Look types sin documentation
    1.startswith
    2.gte,ge,lt,lte=greater than or equal to similarly others
    3.order_by for sorting

Updation of models:
    When we add a field in model then add default so existing data get default value
    and we have validators so than we can make use of restrctions in models.py file 
    from django.core.validators import name_of_validator
    eg-
        from django.core.validators import maxvaluevalidadtor
        now use it as shown
        heart_beat=modals.Integerfield(default=30,validators=[maxvaluevalidadtor(300)])


accessing database using templates:
    link urls to project urls file:
        link using include fn

    link modesl to urls:
        we create urls in modals.py location
        create urlpatterns
        add views to it


    we link urls to views:
            def fn
            here from . import models
            in fn to access database use models.patient.objects.all() use it as context 
            then also add html file
            in html use jingo language to access